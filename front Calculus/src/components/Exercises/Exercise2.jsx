import React, { useState, useEffect, useRef } from "react";
import { Button } from "react-bootstrap";
import { MathJax } from "better-react-mathjax";
import "./Exercise.css";
import { useNavigate } from "react-router-dom";
import { accionService } from "../../services/accionService";
import { resultadoService } from "../../services/resultadoService";
import { MathJaxContext } from "better-react-mathjax";

const mathJaxConfig = {
  loader: { load: ["[tex]/ams"] },
  tex: {
    packages: { "[+]": ["ams"] },
    inlineMath: [["\\(", "\\)"]],
    displayMath: [["\\[", "\\]"]],
  },
};
const solucionesLatex = {
  A: "A) \\( f(x) = x^3 - 3x^2 + 2 \\)",
  B: "B) \\( f(x) = \\frac{1}{x^2 + 1} \\)",
  C: "C) \\( f(x) = 2^x - x \\)",
};

const Exercise2 = ({ onNext }) => {
  const [collabUnlocked, setCollabUnlocked] = useState(false);
  const [answered, setAnswered] = useState(false);
  const [correct, setCorrect] = useState(null);
  const [showNext, setShowNext] = useState(false);
  const iframeRef = useRef(null);
  const navigate = useNavigate();

  const handleAnswer = async (choice) => {
    const isCorrect = choice === "A";
    setAnswered(true);
    setCorrect(isCorrect);
    setShowNext(true);

    const current_exercise = 2;
    const resultado_alumno = solucionesLatex[choice];

    try {
      const resultadoData = await resultadoService(
        resultado_alumno,
        current_exercise
      );
      console.log("Soluci√≥n enviada:", resultadoData);
    } catch (error) {
      console.error("Error al enviar la soluci√≥n:", error);
    }
  };

  useEffect(() => {
    const handleEvent = () => setCollabUnlocked(true);
    window.addEventListener("collab-unlocked-1", handleEvent);
    return () => {
      window.removeEventListener("collab-unlocked-1", handleEvent);
    };
  }, []);

  useEffect(() => {
    let mouseOverIframe = false;

    const handleMouseEnter = () => {
      mouseOverIframe = true;
      console.log("Mouse entr√≥ al iframe");
    };

    const handleMouseLeave = () => {
      mouseOverIframe = false;
      console.log("Mouse sali√≥ del iframe");
    };

    const handleWindowBlur = async () => {
      if (mouseOverIframe) {
        const accion = "Click detectado en grafico";
        const current_exercise = 1;
        const accionData = await accionService(accion, current_exercise);
        console.log("acci√≥n registrada:", accionData);
      }
    };

    const handleWindowFocus = () => {
      console.log("Ventana recuper√≥ el foco");
    };

    const iframe = iframeRef.current;
    if (iframe) {
      iframe.addEventListener("mouseenter", handleMouseEnter);
      iframe.addEventListener("mouseleave", handleMouseLeave);
    }

    window.addEventListener("blur", handleWindowBlur);
    window.addEventListener("focus", handleWindowFocus);

    return () => {
      if (iframe) {
        iframe.removeEventListener("mouseenter", handleMouseEnter);
        iframe.removeEventListener("mouseleave", handleMouseLeave);
      }
      window.removeEventListener("blur", handleWindowBlur);
      window.removeEventListener("focus", handleWindowFocus);
    };
  }, []);

  const getVariant = (option) => {
    if (!answered) return "outline-primary";
    if (correct && option === "A") return "success";
    if (!correct && option === "A") return "success";
    if (!correct && option !== "A") return "danger";
    return "outline-primary";
  };

  return (
    <div className="exercise-card">
      <div className="exercise-question">
        <h3>Funci√≥n Desconocida</h3>
        <p className="mb-3 small-text">
          Junto con tu compa√±ero, su desaf√≠o es descubrir cu√°l es la funci√≥n que
          corresponde al gr√°fico que est√°s viendo. T√∫ solo tienes acceso al
          gr√°fico de la funci√≥n original. Tu compa√±ero observa un gr√°fico
          diferente, pero relacionado, que es clave para resolver el problema.
          Deber√°n comunicarse para descubrir la conexi√≥n entre ambos gr√°ficos e
          identificar la funci√≥n. Abajo puedes ver el gr√°fico de la funci√≥n
          original y tambi√©n puedes usar el bot√≥n para graficar una funci√≥n que
          quieras probar.
        </p>
        <div className="geogebra-container exercise2 mb-3 px-0 mx-auto">
          <iframe
            ref={iframeRef}
            scrolling="no"
            title="Funcion Desconocida"
            src="https://www.geogebra.org/material/iframe/id/mz2z7twc/width/800/height/500/border/888888/sfsb/false/smb/false/stb/false/stbh/false/ai/false/asb/false/sri/false/rc/false/ld/false/sdz/false/ctl/false"
            loading="lazy"
            style={{
              width: "100%",
              height: "auto",
              aspectRatio: "16 / 9",
              border: "0",
            }}
          ></iframe>
        </div>
      </div>

      {collabUnlocked ? (
        <MathJaxContext version={3} config={mathJaxConfig}>
          <div className="exercise-options">
            <Button
              variant={getVariant("A")}
              className="option-button"
              onClick={() => handleAnswer("A")}
              disabled={answered}
            >
              <MathJax>{"A) \\( f(x) = x^3 - 3x^2 + 2 \\)"}</MathJax>
            </Button>

            <Button
              variant={getVariant("B")}
              className="option-button"
              onClick={() => handleAnswer("B")}
              disabled={answered}
            >
              <MathJax>{"B) \\( f(x) = \\frac{1}{x^2 + 1} \\)"}</MathJax>
            </Button>

            <Button
              variant={getVariant("C")}
              className="option-button"
              onClick={() => handleAnswer("C")}
              disabled={answered}
            >
              <MathJax>{"C) \\( f(x) = 2^x - x \\)"}</MathJax>
            </Button>

            {answered && !correct && (
              <div className="feedback-box incorrect">
                <i className="bi bi-x-circle"></i>
                <div className="latex-explanation">
                  <MathJax>
                    {" "}
                    {
                      "Observando el gr√°fico de \\( f(x) \\), identificamos un m√°ximo en \\( x=0 \\) y un m√≠nimo en \\( x=2 \\). Esto sugiere que \\( f'(x) = 0 \\) en esos puntos."
                    }{" "}
                  </MathJax>
                  <MathJax>
                    {" "}
                    {"\\[ f'(x) = a(x)(x - 2) = a(x^2 - 2x). \\]"}{" "}
                  </MathJax>
                  <MathJax>
                    {" "}
                    {
                      "Como la derivada debe ser \\( f'(x) = 3x^2 - 6x \\), entonces \\( a = 3 \\):"
                    }{" "}
                  </MathJax>
                  <MathJax> {"\\[ f'(x) = 3x^2 - 6x. \\]"} </MathJax>
                  <MathJax>
                    {" "}
                    {"Integrando para recuperar \\( f(x) \\):"}{" "}
                  </MathJax>
                  <MathJax>
                    {" "}
                    {
                      "\\[ f(x) = \\int (3x^2 - 6x)\\,dx = x^3 - 3x^2 + C. \\]"
                    }{" "}
                  </MathJax>
                  <MathJax>
                    {" "}
                    {
                      "Como en el gr√°fico se observa \\( f(0) = 2 \\), entonces \\( C = 2 \\):"
                    }{" "}
                  </MathJax>
                  <MathJax> {"\\[ f(x) = x^3 - 3x^2 + 2. \\]"} </MathJax>
                </div>
              </div>
            )}

            {answered && correct && (
              <div className="feedback-box correct">
                <i className="bi bi-check-circle"></i> ¬°Correcto! Has deducido
                correctamente las dimensiones √≥ptimas.
              </div>
            )}

            {answered && (
              <Button
                className="next-button"
                onClick={() => {
                  if (onNext) onNext(); // Llama a la funci√≥n onNext si est√° definida
                  navigate("/analisis"); // Luego navega a /analisis
                }}
              >
                Feedback<i className="bi bi-arrow-right"></i>
              </Button>
            )}
          </div>
        </MathJaxContext>
      ) : (
        <div className="collaboration-message">
          <div className="collaboration-icon">
            <i className="bi bi-chat-dots"></i>
            <p>
              ¬°Colabora con tu compa√±ero para resolver el desaf√≠o! <br />
              <strong>
                Tienen hasta <span style={{ color: "#007bff" }}>30 turnos</span>{" "}
                para llegar juntos a la respuesta final.
              </strong>
            </p>
            <p className="hint">
              <span style={{ color: "#dc3545", fontWeight: "bold" }}>
                Usa el bot√≥n <strong>‚ÄúLlegamos a un acuerdo‚Äù</strong>{" "}
                <u>
                  solo si ambos ya est√°n de acuerdo y quieren responder antes de
                  los 30 turnos
                </u>
                .
              </span>
            </p>
            <p className="hint">
              Ap√≥yense usando el gr√°fico interactivo para visualizar ideas y
              validar sus propuestas.
            </p>
            <p className="hint" style={{ marginBottom: 0 }}>
              Consejos para colaborar bien:
            </p>
          </div>
          <ol className="collaboration-steps">
            <li>
              ü§ù <strong>Escuchen y comprendan:</strong> Aclaren dudas y
              aseg√∫rense de que ambos entienden el problema.
            </li>
            <li>
              üß† <strong>Propongan y discutan ideas:</strong> Compartan puntos
              de vista, usen el gr√°fico y argumenten sus propuestas.
            </li>
            <li>
              ‚úÖ <strong>Decidan juntos:</strong> Lleguen a una soluci√≥n en
              conjunto y aseg√∫rense de que ambos est√©n de acuerdo antes de
              responder.
            </li>
          </ol>
        </div>
      )}
    </div>
  );
};

export default Exercise2;
